Index: src/main/java/ro/cmm/mvc/CarController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ro.cmm.mvc;\r\n\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.beans.factory.annotation.Value;\r\nimport org.springframework.stereotype.Controller;\r\nimport org.springframework.validation.BindingResult;\r\nimport org.springframework.validation.ObjectError;\r\nimport org.springframework.web.bind.annotation.RequestMapping;\r\nimport org.springframework.web.multipart.MultipartFile;\r\nimport org.springframework.web.servlet.ModelAndView;\r\nimport org.springframework.web.servlet.view.RedirectView;\r\nimport ro.cmm.domain.Car;\r\nimport ro.cmm.domain.CarLocation;\r\nimport ro.cmm.service.CarService;\r\nimport ro.cmm.service.LoginService;\r\nimport ro.cmm.service.SecurityService;\r\nimport ro.cmm.service.ValidationException;\r\n\r\nimport javax.validation.Valid;\r\nimport java.io.File;\r\nimport java.io.IOException;\r\nimport java.util.HashMap;\r\nimport java.util.LinkedList;\r\nimport java.util.List;\r\nimport java.util.Map;\r\n\r\n/**\r\n * @author Emanuel Pruker\r\n */\r\n@Controller\r\n@RequestMapping(\"/car\")\r\npublic class CarController {\r\n\r\n    @Value(\"${local.files.dir}\")\r\n    private String localFilesDir;\r\n\r\n    @Autowired\r\n    private CarService carService;\r\n\r\n\r\n    @Autowired\r\n    private SecurityService securityService;\r\n\r\n    private final Map<Long, String> carToLastImgURL = new HashMap<>();\r\n\r\n    private String lastImgUrl;\r\n\r\n    @RequestMapping(\"/add\")\r\n    public ModelAndView add() {\r\n        ModelAndView modelAndView = new ModelAndView(\"car/add\");\r\n        Map<String,List<String>> map = carService.getManufacturersAndTypes();\r\n\r\n//        if (carModel.getManufacturer() == null) {\r\n//            carModel.setManufacturer(\"All\");\r\n//        }\r\n//        if (carModel.getColour() == null) {\r\n//            carModel.setColour(\"All\");\r\n//        }\r\n//        if (carModel.getType() == null) {\r\n//            carModel.setType(\"All\");\r\n////        }\r\n//\r\n//        String searchModelManufacturer = carModel.getManufacturer();\r\n//        String searchModelType = carModel.getType();\r\n//\r\n//        List<String> typeListForManufacturer = map.get(searchModelManufacturer);\r\n//\r\n//        if(!typeListForManufacturer.contains(searchModelType)) {\r\n//            carModel.setType(\"All\");\r\n//        }\r\n        modelAndView.addObject(\"car\", new Car());\r\n        modelAndView.addObject(\"map\", map);\r\n        modelAndView.addObject(\"colours\", carService.getAllColors());\r\n        return modelAndView;\r\n    }\r\n\r\n    @RequestMapping(\"/edit\")\r\n    public ModelAndView edit(long id) {\r\n        Car car = carService.getById(id);\r\n        if (!securityService.verifyCurrentUser(car.getSellerId())){\r\n            ModelAndView modelAndView = new ModelAndView();\r\n            RedirectView redirectView = new RedirectView(\"/denied\");\r\n            modelAndView.setView(redirectView);\r\n            return modelAndView;\r\n        }else {\r\n            CarLocation carLocation = car.getLocation();\r\n            Map<String, List<String>> map = carService.getManufacturersAndTypes();\r\n            ModelAndView modelAndView = new ModelAndView(\"car/add\");\r\n            modelAndView.addObject(\"car\", car);\r\n            modelAndView.addObject(\"carLocation\", carLocation);\r\n            modelAndView.addObject(\"map\", map);\r\n            modelAndView.addObject(\"colours\", carService.getAllColors());\r\n            return modelAndView;\r\n        }\r\n    }\r\n\r\n    @RequestMapping(\"/save\")\r\n    public ModelAndView save(@Valid  Car car,\r\n                             CarLocation carLocation,\r\n                             BindingResult bindingResult,\r\n                             MultipartFile file) {\r\n                            //BindingResult fileBindingResult\r\n\r\n        ModelAndView modelAndView = new ModelAndView();\r\n        boolean hasErrors = false;\r\n        Map<String,List<String>> map = carService.getManufacturersAndTypes();\r\n        List<String> errors = new LinkedList<>();\r\n        if (!bindingResult.hasErrors()) {\r\n                try {\r\n                    car.setSellerId(securityService.getCurrentUser().getId());\r\n\r\n                    //saving the file and setting the cars imgUrl field\r\n                    long id = car.getId();\r\n                    String imgUrl = null;\r\n                    if(file != null && !file.getOriginalFilename().isEmpty()) {\r\n                        File localFile = new File(localFilesDir, System.currentTimeMillis() +\"_\" + file.getOriginalFilename());\r\n                        file.transferTo(localFile);\r\n                        imgUrl = localFile.getName();\r\n                        car.setImgUrl(imgUrl);\r\n                        lastImgUrl = imgUrl;\r\n                    } else if (carToLastImgURL.containsKey(id)){\r\n\r\n                        car.setImgUrl(carToLastImgURL.get(id));\r\n                    } else if (lastImgUrl != null) {\r\n                        car.setImgUrl(lastImgUrl);\r\n                    }\r\n                    car.setLocation(carLocation);\r\n                    car = carService.save(car);\r\n                    if (id == 0) {\r\n                        carToLastImgURL.put(car.getId(),imgUrl);\r\n                    }\r\n\r\n                    RedirectView redirectView = new RedirectView(\"/\");\r\n                    modelAndView.setView(redirectView);\r\n                } catch (ValidationException ex) {\r\n//                    for (String msg : ex.getCauses()) {\r\n//                        bindingResult.addError(new ObjectError(\"userLogin\", msg));\r\n//                    }\r\n\r\n                    errors.add(ex.getMessage());\r\n                    hasErrors = true;\r\n                } catch (IOException e) {\r\n//                    bindingResult.addError(new ObjectError(\"fileUpload\", e.getMessage()));\r\n//                    errors.add(e.getMessage());\r\n                }\r\n        } else {\r\n            hasErrors = true;\r\n        }\r\n\r\n        if (hasErrors){\r\n            car.setImgUrl(lastImgUrl);\r\n            modelAndView = new ModelAndView(\"car/add\");\r\n            modelAndView.addObject(\"errors\", errors);\r\n            modelAndView.addObject(\"car\", car);\r\n            modelAndView.addObject(\"map\", map);\r\n            modelAndView.addObject(\"colours\", carService.getAllColors());\r\n        } else {\r\n            lastImgUrl = null;\r\n        }\r\n\r\n        System.out.println(car);\r\n\r\n\r\n        return modelAndView;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/ro/cmm/mvc/CarController.java	(revision 3a5bc42f501ecc95356ca42a049d5e35185e65cb)
+++ src/main/java/ro/cmm/mvc/CarController.java	(revision )
@@ -126,7 +126,7 @@
                     }
                     car.setLocation(carLocation);
                     car = carService.save(car);
-                    if (id == 0) {
+                    if (imgUrl != null) {
                         carToLastImgURL.put(car.getId(),imgUrl);
                     }
 
Index: src/main/resources/application.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>db.host = localhost\ndb.user = postgres\ndb.password = password\ndb.name = cmm\nlocal.files.dir = c:/img/\nspring.http.multipart.max-file-size=1024KB\nspring.http.multipart.max-request-size=1024KB\n\n\n#spring.queries.users-query=select email, password, active from app_user where email=?\n#spring.queries.roles-query=select u.email, r.name from app_user u inner join user_role ur on(u.id=ur.user_id) inner join role r on(ur.role_id=r.id) where u.email=?
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>windows-1252
===================================================================
--- src/main/resources/application.properties	(revision 3a5bc42f501ecc95356ca42a049d5e35185e65cb)
+++ src/main/resources/application.properties	(revision )
@@ -1,6 +1,6 @@
 db.host = localhost
 db.user = postgres
-db.password = password
+db.password = postgres
 db.name = cmm
 local.files.dir = c:/img/
 spring.http.multipart.max-file-size=1024KB
